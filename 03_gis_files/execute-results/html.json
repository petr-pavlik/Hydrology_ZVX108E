{
  "hash": "53c8b4ada80de32353afc4c54ab84bed",
  "result": {
    "markdown": "# GIS in Hydrology\n\nSpatial Data Science\\    \nGeocomputation with R\n\n## WhiteboxTools\n\nIn this session we use the **WhiteboxTools** (WBT) a modern and advanced geospatial \npackage, tools collection, which contains \\~450 functions. The WBT has an interface \nto r and python. \n\nThe tool can be downloaded from [http://whiteboxgeo.com/](http://whiteboxgeo.com/).\n\n## Raster and vector data\n\n**Raster** data are represented by a matrix of pixels (cells) with values. Raster\nis used for data which display continuous information across an area which cannot\nbe easily divided into vector features. For the purpose of watershed delineation\nthe raster input of Digital Elevation Model is used.\n\n## Watershed delineation\n\nThe process of delineation is the first step in basin description. One simply has \nto delineate the domain\n\nThe step-by-step process involves:\\\n\n  - Acquiring digital elevation model of area\\\n  - Pit and sink removal\\\n  - Flow accumulation calculation \\\n  - Flow direction calculation \\\n  - Outlet identification \\\n  - Delineation towards specified outlet\\\n\nLet's start with `whitebox` package that contains an API to the WhiteboxTools \nexecutable binary. \\\nWe need to reference path to the executable \n\nExcept for the `whitebox` package, some other packages for general work with spatial \ndata are necessary. The packages `terra` and `sf` are needed for working with the \nraster and vector data. They also provide access to **PROJ**, **GEOS** and **GDAL** \nwhich are open source libraries that handle projections, format standards and provide \ngeoscientific calculations. And the package `tmap` makes plotting both raster and \nvector layers very easy.\n\n## Watershed delineation workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(whitebox)               # <1>\nlibrary(terra)                  # <2>\n## terra 1.7.78\nlibrary(sf)                     # <3>\n## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\nlibrary(tmap)                   # <4> \n## Breaking News: tmap 3.x is retiring. Please test v4, e.g. with\n## remotes::install_github('r-tmap/tmap')\nwhitebox::wbt_init(exe_path = \"~/Downloads/WBT/whitebox_tools\") # <5>\nwhitebox::check_whitebox_binary() # <6>\n## [1] TRUE\n```\n:::\n\n1. Load the Whitebox API package\n2. Load the `terra` package for raster use\n3. Load the `sf` package for vector use\n4. Load the `tmap` plotting functions for layers\n5. Whitebox needs the information where the data executable is stored\n6. Binary check of functionality\n\n\n#### Sample data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem <- rast(whitebox::sample_dem_data()) # <1>\ntm_layout() + # <2>\n  tm_shape(dem) + # <2>\n  tm_raster(palette = \"-Greys\", n = 50, legend.show = FALSE) # <2>\n```\n\n::: {.cell-output-display}\n![](03_gis_files/figure-html/unnamed-chunk-2-1.svg)\n:::\n:::\n\n1. Use the `rast()` function to load the data\n2. Plot via the `tmap` workflow\n\n#### DEM workflow\nThe digital elevation model has to be adjusted for the watershed delineation \nalgorithm to be able to run successfully.\n\nWe need to specifiy a path to working directory. It has to be somewhere where you\nas a user have access to write files. Be sure the folder exists. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwd_path <- \"~/Desktop/GIS\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\nwbt_fill_depressions_wang_and_liu(dem = paste(wd_path,      # <1>\n                                              \"dem.tif\",       # <1>\n                                              sep = \"/\"),       # <1>\n                                  output = paste(wd_path,       # <1>\n                                                 \"filled_depresions.tif\",      # <1> \n                                                 sep = \"/\"))      # <1>\n\nwbt_d8_pointer(dem = paste(wd_path,       # <2>\n                           \"filled_depresions.tif\",       # <2>\n                           sep = \"/\"),       # <2>\n               output = paste(wd_path,       # <2>\n                              \"d8pointer.tif\",       # <2>\n                              sep = \"/\"))      # <2>\n\nwbt_d8_flow_accumulation(input = paste(wd_path,  # <3>\n                                       \"filled_depresions.tif\",   # <3>\n                                       sep = \"/\"),  # <3>\n                         output = paste(wd_path,   # <3>\n                                        \"flow_accu.tif\",  # <3> \n                                        sep = \"/\"),   # <3>\n                         out_type = \"cells\")  # <3>\n\nwbt_extract_streams(flow_accum = paste(wd_path,   # <4>\n                                       \"flow_accu.tif\",    # <4>\n                                       sep = \"/\"),    # <4>\n                    output = paste(wd_path,    # <4>\n                                   \"streams.tif\",    # <4>\n                                   sep = \"/\"),    # <4>\n                    threshold = 200)   # <4>\n\n```\n:::\n\n1. This algorithm involves removing flat areas and filling depressions, thus producing hydrologically corrected DEM\n2. Pointer is ![https://www.researchgate.net/publication/333193489/figure/fig14/AS:941786386149402@1601550780863/Sketch-map-of-D8-algorithm-a-direction-coding-of-D8-algorithm-b-sample-elevation.png](https://www.researchgate.net/publication/333193489/figure/fig14/AS:941786386149402@1601550780863/Sketch-map-of-D8-algorithm-a-direction-coding-of-D8-algorithm-b-sample-elevation.png)\n\n\n\n## Gauge\n\nWe have the raster prepared for the delineation, now we need to provide a point \nlayer with the gauge, to which the watershed should be delineated. The point\nhas to be placed at the stream network. We will create the layer from scratch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngauge <- st_sfc(st_point(x = c(671035, 4885783), \n                               dim = \"XY\"), \n                      crs = st_crs(26918))\nst_write(obj = gauge, \n         dsn = paste(wd_path, \"gauge\", sep = \"/\"), \n         driver = \"ESRI Shapefile\", \n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeleting source `/Users/petrmbpro/Desktop/GIS/gauge' using driver `ESRI Shapefile'\nWriting layer `gauge' to data source \n  `/Users/petrmbpro/Desktop/GIS/gauge' using driver `ESRI Shapefile'\nWriting 1 features with 0 fields and geometry type Point.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_layout() +\n  tm_shape(dem) +\n  tm_raster(palette = \"-Greys\", n = 50, legend.show = FALSE) +\n  tm_shape(gauge) +\n  tm_dots(col = \"orangered\", size = 1)\n```\n\n::: {.cell-output-display}\n![](03_gis_files/figure-html/unnamed-chunk-6-1.svg)\n:::\n:::\n\nIf the point is not located directly in the stream, it could cause troubles.\nThe **Jenson snap pour** makes sure to move the point to the nearest stream pixel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwbt_jenson_snap_pour_points(pour_pts = paste(wd_path, \n                                             \"gauge/gauge.shp\", \n                                             sep = \"/\"), \n                            streams = paste(wd_path, \n                                            \"streams.tif\", \n                                            sep = \"/\"), \n                            output = paste(wd_path, \n                                           \"gauge_snapped.shp\", \n                                           sep = \"/\"), \n                            snap_dist = 1000)\n```\n:::\n\n\nNow everything is set to delineate the watershed with using the gauge and D8 pointer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwbt_watershed(d8_pntr = paste(wd_path, \"d8pointer.tif\", sep = \"/\"),\n              pour_pts = paste(wd_path, \"gauge_snapped.shp\", sep = \"/\"), \n              output = paste(wd_path, \"watershed.tif\", sep = \"/\"))\n```\n:::\n\n\nThe watershed is usually used in vector format, but now it is in raster. Let's \nfinish with the conversion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwtshd <- rast(paste(wd_path, \"watershed.tif\", sep = \"/\"))\nwatershed <- terra::as.polygons(wtshd)\n```\n:::\n\n\n\n## River morphology\n\nUnder the term **river morphology** we understand the description of the shape of \nriver channels. Hydrologists use indices such as **stream length** or **Strahler order**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwbt_strahler_stream_order(d8_pntr = paste(wd_path, \"d8pointer.tif\", sep = \"/\"), \n                          streams = paste(wd_path, \"streams.tif\", sep = \"/\"), \n                          output = paste(wd_path, \"strahler.tif\", sep = \"/\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Results\n\n![data/output.png](./data/output.png)\n\n",
    "supporting": [
      "03_gis_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}